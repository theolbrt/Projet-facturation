{"remainingRequest":"C:\\Users\\UTILISATEUR\\Desktop\\projetFacturation\\vuefacturation\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\UTILISATEUR\\Desktop\\projetFacturation\\vuefacturation\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\UTILISATEUR\\Desktop\\projetFacturation\\vuefacturation\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\UTILISATEUR\\Desktop\\projetFacturation\\vuefacturation\\src\\views\\Stock.vue?vue&type=template&id=c1e97b68&scoped=true&","dependencies":[{"path":"C:\\Users\\UTILISATEUR\\Desktop\\projetFacturation\\vuefacturation\\src\\views\\Stock.vue","mtime":1615997686336},{"path":"C:\\Users\\UTILISATEUR\\Desktop\\projetFacturation\\vuefacturation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\UTILISATEUR\\Desktop\\projetFacturation\\vuefacturation\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\UTILISATEUR\\Desktop\\projetFacturation\\vuefacturation\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\UTILISATEUR\\Desktop\\projetFacturation\\vuefacturation\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}